import os
import bcrypt
import telebot
import sqlite3
import datetime
import fitz  # PyMuPDF
import re
from openai import OpenAI
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))



bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)
DB_PATH = 'qaltauser.db'


def connect_db():
    return sqlite3.connect(DB_PATH)


def init_db():
    conn = connect_db()
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE,
                    name TEXT,
                    password BLOB)''')
    cur.execute('''CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    type TEXT,
                    amount REAL,
                    category TEXT,
                    date TEXT,
                    FOREIGN KEY (user_id) REFERENCES users(id))''')
    conn.commit()
    cur.close()
    conn.close()


init_db()


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
    markup.add(types.KeyboardButton('üîë –í–æ–π—Ç–∏'))
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
def register(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.register_next_step_handler(message, process_register_name)


def process_register_name(message):
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, process_register_password, name)


def process_register_password(message, name):
    password = message.text.strip()
    conn = connect_db()
    cur = conn.cursor()

    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –±–∞–π—Ç—ã (BLOB)
    hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

    try:
        cur.execute("INSERT INTO users (telegram_id, name, password) VALUES (?, ?, ?)",
                    (message.from_user.id, name, hashed))
        conn.commit()
        bot.send_message(message.chat.id, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.')
    except sqlite3.IntegrityError:
        bot.send_message(message.chat.id, '‚ùå –≠—Ç–æ—Ç Telegram ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.')

    cur.close()
    conn.close()



@bot.message_handler(func=lambda message: message.text == 'üîë –í–æ–π—Ç–∏')
def login(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.register_next_step_handler(message, process_login)


def process_login(message):
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, lambda msg: check_login(msg, name))


def check_login(message, name):
    password = message.text.strip()
    conn = connect_db()
    cur = conn.cursor()

    cur.execute("SELECT id, password FROM users WHERE name = ?", (name,))
    user = cur.fetchone()

    cur.close()
    conn.close()

    # –í –±–∞–∑–µ –ø–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –±–∞–π—Ç—ã, –±–µ–∑ .encode()
    if user and bcrypt.checkpw(password.encode('utf-8'), user[1]):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'))
        markup.add(types.KeyboardButton('üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'))
        markup.add(types.KeyboardButton('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))
        bot.send_message(message.chat.id, '‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


@bot.message_handler(func=lambda message: message.text == 'üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')
def add_income(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    categories = ['–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –¥–æ—Ö–æ–¥–æ–≤', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã', '–†–∞–∑–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    for category in categories:
        markup.add(types.KeyboardButton(category))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:', reply_markup=markup)
    bot.register_next_step_handler(message, process_income_category)





def process_income_category(message):
    category = message.text.strip()

    if category == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    subcategories = {
        '–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –¥–æ—Ö–æ–¥–æ–≤': ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–µ–º–∏–∏', '–ü–µ–Ω—Å–∏—è', '–°—Ç–∏–ø–µ–Ω–¥–∏—è'],
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã': ['–§—Ä–∏–ª–∞–Ω—Å', '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥', '–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–î–∏–≤–∏–¥–µ–Ω–¥—ã', '–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º'],
        '–†–∞–∑–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã': ['–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–æ–≤', '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '–ü–æ–¥–∞—Ä–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã—à–∏', '–ö—ç—à–±—ç–∫ –∏ —Å–∫–∏–¥–∫–∏']
    }

    if category in subcategories:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for subcategory in subcategories[category]:
            markup.add(types.KeyboardButton(subcategory))
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:', reply_markup=markup)
        bot.register_next_step_handler(message, process_income_subcategory, category)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:')
        bot.register_next_step_handler(message, save_income, category)


def process_income_subcategory(message, category):
    subcategory = message.text.strip()

    if subcategory == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        add_income(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        return

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:')
    bot.register_next_step_handler(message, save_income, subcategory)

def save_income(message, category):
    try:
        amount = float(message.text.strip())
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_income:{category}:{amount}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        bot.send_message(message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ {amount} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{category}\"?", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!')
        bot.register_next_step_handler(message, save_income, category)

def main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'))
    markup.add(types.KeyboardButton('üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'))
    markup.add(types.KeyboardButton('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)




@bot.message_handler(func=lambda message: message.text == 'üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
def add_expense(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    categories = ['üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', 'üìå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', 'üìå –†–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', 'üìå –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    for category in categories:
        markup.add(types.KeyboardButton(category))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:', reply_markup=markup)
    bot.register_next_step_handler(message, process_expense_category)

def process_expense_category(message):
    category = message.text.strip()

    if category == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        main_menu(message)  # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return


    subcategories = {
        'üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': ['üè† –ñ–∏–ª—å–µ', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üçΩÔ∏è –ï–¥–∞', 'üì± –°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üíä –ó–¥–æ—Ä–æ–≤—å–µ', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥–µ—Ç–∏'],
        'üìå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': ['üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üõçÔ∏è –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
        'üìå –†–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': ['üéÅ –ü–æ–¥–∞—Ä–∫–∏ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', 'üè† –ü–æ–∫—É–ø–∫–∏ –¥–ª—è –¥–æ–º–∞', 'üê∂ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ'],
        'üìå –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['üí≥ –ö—Ä–µ–¥–∏—Ç—ã –∏ –¥–æ–ª–≥–∏', 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è']
    }

    if category in subcategories:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for subcategory in subcategories[category]:
            markup.add(types.KeyboardButton(subcategory))
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:', reply_markup=markup)
        bot.register_next_step_handler(message, process_expense_subcategory, category)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(message, save_expense, category)

def process_expense_subcategory(message, category):
    subcategory = message.text.strip()
    if subcategory == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        add_expense(message)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(message, save_expense, subcategory)

def save_expense(message, category):
    try:
        amount = float(message.text.strip())
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_expense:{category}:{amount}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        bot.send_message(message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ {amount} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{category}\"?", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!')
        bot.register_next_step_handler(message, save_expense, category)



@bot.message_handler(func=lambda message: message.text == 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
def show_statistics(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üóì –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é'))
    markup.add(types.KeyboardButton('üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü'))
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_to_main_menu(message):
    main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


@bot.message_handler(func=lambda message: message.text == 'üóì –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é')
def show_week_report(message):
    conn = connect_db()
    cur = conn.cursor()

    week_start = datetime.datetime.now() - datetime.timedelta(days=7)
    cur.execute("""
        SELECT SUM(amount) FROM transactions 
        WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?) 
        AND date >= ?
    """, (message.from_user.id, week_start.strftime('%Y-%m-%d')))
    income = cur.fetchone()[0] or 0

    cur.execute("""
        SELECT SUM(amount) FROM transactions 
        WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?) 
        AND date >= ?
        AND type = '—Ä–∞—Å—Ö–æ–¥'
    """, (message.from_user.id, week_start.strftime('%Y-%m-%d')))
    expense = cur.fetchone()[0] or 0

    balance = income - expense

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    bot.send_message(message.chat.id, f"üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\nüí∞ –î–æ—Ö–æ–¥: {income} $\nüìâ –†–∞—Å—Ö–æ–¥: {expense} $\nüíµ –ë–∞–ª–∞–Ω—Å: {balance} $", reply_markup=markup)
    cur.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == 'üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü')
def show_month_report(message):
    conn = connect_db()
    cur = conn.cursor()

    month_start = datetime.datetime.now().replace(day=1)
    cur.execute("""
        SELECT SUM(amount) FROM transactions 
        WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?) 
        AND date >= ?
    """, (message.from_user.id, month_start.strftime('%Y-%m-%d')))
    income = cur.fetchone()[0] or 0

    cur.execute("""
        SELECT SUM(amount) FROM transactions 
        WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?) 
        AND date >= ?
        AND type = '—Ä–∞—Å—Ö–æ–¥'
    """, (message.from_user.id, month_start.strftime('%Y-%m-%d')))
    expense = cur.fetchone()[0] or 0

    balance = income - expense

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    bot.send_message(message.chat.id, f"üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü:\nüí∞ –î–æ—Ö–æ–¥: {income} $\nüìâ –†–∞—Å—Ö–æ–¥: {expense} $\nüíµ –ë–∞–ª–∞–Ω—Å: {balance} $", reply_markup=markup)
    cur.close()
    conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_income") or call.data.startswith("confirm_expense") or call.data == "cancel")
def confirm_transaction(call):
    if call.data == "cancel":
        bot.send_message(call.message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        main_menu(call.message)
        return

    action, category, amount = call.data.split(":")
    amount = float(amount)
    user_id = call.from_user.id

    conn = connect_db()
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
    user = cur.fetchone()

    if user:
        transaction_type = "–¥–æ—Ö–æ–¥" if action == "confirm_income" else "—Ä–∞—Å—Ö–æ–¥"
        cur.execute("INSERT INTO transactions (user_id, type, amount, category, date) VALUES (?, ?, ?, ?, DATE('now'))",
                    (user[0], transaction_type, amount, category))
        conn.commit()
        bot.send_message(call.message.chat.id, f"‚úÖ {transaction_type.capitalize()} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    cur.close()
    conn.close()
    main_menu(call.message)


@bot.message_handler(commands=['users'])
def show_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = connect_db()
    cur = conn.cursor()

    cur.execute("SELECT telegram_id, name, password FROM users")
    users = cur.fetchall()

    cur.close()
    conn.close()

    if not users:
        bot.send_message(message.chat.id, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_list = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for telegram_id, name, password in users:
        user_list += f"üÜî ID: {telegram_id}\nüë§ –ò–º—è: {name}\nüîë –ü–∞—Ä–æ–ª—å: {password}\n"
        user_list += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    bot.send_message(message.chat.id, user_list, parse_mode="Markdown")



@bot.message_handler(content_types=['document'])
def handle_pdf(message):
    if not message.document.mime_type == 'application/pdf':
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    os.makedirs("temp", exist_ok=True)
    file_path = f"temp/{message.document.file_name}"
    with open(file_path, 'wb') as f:
        f.write(downloaded_file)

    bot.send_message(message.chat.id, "üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫...")

    try:
        text = extract_text_from_pdf(file_path)
        amount = extract_amount(text)

        if amount is None:
            bot.send_message(message.chat.id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É –∏–∑ —Ñ–∞–π–ª–∞.")
            return

        user_id = message.from_user.id
        conn = connect_db()
        cur = conn.cursor()
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
        user = cur.fetchone()

        if not user:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        db_user_id = user[0]

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if "–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ" in text.lower() or "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" in text.lower():
            transaction_type = "–¥–æ—Ö–æ–¥"
            category = "–ü–ª–∞—Ç—ë–∂ –ø–æ –≤—ã–ø–∏—Å–∫–µ"
        elif "–ø–µ—Ä–µ–≤–æ–¥" in text.lower() or "—Å–Ω—è—Ç–∏–µ" in text.lower():
            transaction_type = "—Ä–∞—Å—Ö–æ–¥"
            category = "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –≤—ã–ø–∏—Å–∫–µ"
        else:
            transaction_type = "–¥–æ—Ö–æ–¥"
            category = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

        cur.execute("""
            INSERT INTO transactions (user_id, type, amount, category, date)
            VALUES (?, ?, ?, ?, DATE('now'))
        """, (db_user_id, transaction_type, amount, category))

        conn.commit()
        cur.close()
        conn.close()

        bot.send_message(message.chat.id, f"‚úÖ {transaction_type.capitalize()} {amount}‚Ç∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{category}\"")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

# üîç –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def extract_amount(text):
    matches = re.findall(r'[+-]?\d+[.,]?\d*', text)
    if matches:
        return float(matches[0].replace(',', '.'))
    return None

def analyze_with_gpt(text):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—ë –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–æ–¥–µ *, #, - –∏ –¥—Ä—É–≥–∏—Ö. "
                    "–ü–∏—à–∏ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫—É. –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\n"

                    "–î–æ—Ö–æ–¥—ã:\n"
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –¥–æ—Ö–æ–¥–æ–≤:\n"
                    "1. –ó–∞—Ä–ø–ª–∞—Ç–∞: ...\n"
                    "2. –ë–æ–Ω—É—Å—ã –∏ –ø—Ä–µ–º–∏–∏: ...\n"
                    "(–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π)\n\n"

                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã:\n"
                    "...\n\n"

                    "–†–∞–∑–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã:\n"
                    "...\n\n"

                    "–†–∞—Å—Ö–æ–¥—ã:\n"
                    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:\n"
                    "1. –ñ–∏–ª—å–µ: ...\n"
                    "2. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ...\n"
                    "...\n\n"

                    "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:\n"
                    "...\n\n"

                    "–†–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:\n"
                    "...\n\n"

                    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n"
                    "...\n\n"

                    "–ß–∞—Å—Ç—ã–µ —Ç—Ä–∞—Ç—ã:\n"
                    "1. ...\n"
                    "2. ...\n\n"

                    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    "1. ...\n"
                    "2. ...\n"
                    "3. ...\n"
                    "4. ...\n"
                )
            },
            {"role": "user", "content": text}
        ]
    )
    return response.choices[0].message.content.strip()



# –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –æ—Ç—á–µ—Ç—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è) –æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∏–∂–µ.
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–Ω–æ–≤–∞ handle_pdf –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—à—å –ø–∞—Ä–æ–ª–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç PDF-—Ñ–∞–π–ª—ã...")



















def send_reminders():
    conn = connect_db()
    cur = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("SELECT telegram_id FROM users")
    users = cur.fetchall()

    cur.close()
    conn.close()

    for user in users:
        bot.send_message(user[0], "üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è!")

scheduler = BackgroundScheduler()
scheduler.add_job(send_reminders, 'cron', hour=15, minute=10)
scheduler.start()

bot.polling(none_stop=True)